<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cyou.gr.dao.ProcessNodeMapper">
	<resultMap id="BaseResultMap" type="com.cyou.gr.entity.ProcessNode">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="process_id" property="processId" jdbcType="INTEGER" />
		<result column="sort" property="sort" jdbcType="INTEGER" />
		<result column="process_type" property="processType" jdbcType="CHAR" />
		<result column="end_type" property="endType" jdbcType="CHAR" />
		<result column="time_type" property="timeType" jdbcType="CHAR" />
		<result column="has_fee" property="hasFee" jdbcType="BIT" />
		<result column="has_manPower" property="hasManPower" jdbcType="BIT" />
		<result column="has_taskBook" property="hasTaskBook" jdbcType="BIT" />
		<result column="has_checkBill" property="hasCheckBill" jdbcType="BIT" />
		<result column="has_document" property="hasDocument" jdbcType="BIT" />
		<result column="flag" property="flag" jdbcType="BIT" />
		<association property="process" javaType="com.cyou.gr.entity.Process">
			<id column="pid" property="id" jdbcType="INTEGER" />
			<result column="pname" property="name" jdbcType="VARCHAR" />
		</association>
	</resultMap>
	<sql id="Base_Column_List">
		id, name, process_id, sort, process_type, end_type, time_type,
		has_fee,has_manPower, flag,has_taskBook,has_checkBill,has_document
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select pn.*,
		p.id pid,p.name pname
		from process_node pn
		left join process p on p.id=pn.process_id
		where pn.id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from process_node
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.cyou.gr.entity.ProcessNode">
		insert into process_node (id, name, process_id,
		sort, process_type, end_type,
		time_type,has_fee , has_manPower ,has_taskBook ,has_checkBill ,has_document ,flag)
		values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
		#{processId,jdbcType=INTEGER},
		#{sort,jdbcType=INTEGER}, #{processType,jdbcType=CHAR}, #{endType,jdbcType=CHAR},
		#{timeType,jdbcType=CHAR}, #{hasFee,jdbcType=BIT},
		#{hasManPower,jdbcType=BIT}, #{hasTaskBook,jdbcType=BIT},
		#{hasCheckBill,jdbcType=BIT}, #{hasDocument,jdbcType=BIT},
		#{flag,jdbcType=BIT})
	</insert>
	<insert id="insertSelective" parameterType="com.cyou.gr.entity.ProcessNode">
		insert into process_node
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="processId != null">
				process_id,
			</if>
			<if test="sort != null">
				sort,
			</if>
			<if test="processType != null">
				process_type,
			</if>
			<if test="endType != null">
				end_type,
			</if>
			<if test="timeType != null">
				time_type,
			</if>
			<if test="hasFee != null">
				has_fee,
			</if>
			<if test="hasManPower != null">
				has_manPower,
			</if>
			<if test="hasTaskBook != null">
				has_manPower,
			</if>
			<if test="hasCheckBill != null">
				has_manPower,
			</if>
			<if test="hasDocument != null">
				has_Document,
			</if>
			<if test="flag != null">
				flag,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="processId != null">
				#{processId,jdbcType=INTEGER},
			</if>
			<if test="sort != null">
				#{sort,jdbcType=INTEGER},
			</if>
			<if test="processType != null">
				#{processType,jdbcType=CHAR},
			</if>
			<if test="endType != null">
				#{endType,jdbcType=CHAR},
			</if>
			<if test="timeType != null">
				#{timeType,jdbcType=CHAR},
			</if>
			<if test="hasFee != null">
				#{hasFee,jdbcType=BIT},
			</if>
			<if test="hasManPower != null">
				#{hasManPower,jdbcType=BIT},
			</if>
			<if test="hasTaskBook != null">
				#{hasTaskBook,jdbcType=BIT},
			</if>
			<if test="hasCheckBill != null">
				#{hasCheckBill,jdbcType=BIT},
			</if>
			<if test="hasDocument != null">
				#{hasDocument,jdbcType=BIT},
			</if>
			<if test="flag != null">
				#{flag,jdbcType=BIT},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.cyou.gr.entity.ProcessNode">
		update process_node
		<set>
			<if test="name != null">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="processId != null">
				process_id = #{processId,jdbcType=INTEGER},
			</if>
			<if test="sort != null">
				sort = #{sort,jdbcType=INTEGER},
			</if>
			<if test="processType != null">
				process_type = #{processType,jdbcType=CHAR},
			</if>
			<if test="endType != null">
				end_type = #{endType,jdbcType=CHAR},
			</if>
			<if test="timeType != null">
				time_type = #{timeType,jdbcType=CHAR},
			</if>
			<if test="flag != null">
				flag = #{flag,jdbcType=BIT},
			</if>
			<if test="hasFee != null">
					has_fee=#{hasFee,jdbcType=BIT},
			</if>
			<if test="hasManPower != null">
					has_manPower=#{hasManPower,jdbcType=BIT},
			</if>
			<if test="hasTaskBook != null">
					has_taskBook=#{hasTaskBook,jdbcType=BIT},
			</if>
			<if test="hasCheckBill != null">
					has_checkBill=#{hasCheckBill,jdbcType=BIT},
			</if>
			<if test="hasDocument != null">
					has_document=#{hasDocument,jdbcType=BIT},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.cyou.gr.entity.ProcessNode">
		update process_node
		set name = #{name,jdbcType=VARCHAR},
		process_id = #{processId,jdbcType=INTEGER},
		sort = #{sort,jdbcType=INTEGER},
		process_type = #{processType,jdbcType=CHAR},
		end_type = #{endType,jdbcType=CHAR},
		time_type = #{timeType,jdbcType=CHAR},
		has_fee=#{has_fee,jdbcType=BIT},
		has_manPower=#{hasManPower,jdbcType=BIT},
		has_taskBook=#{hasTaskBook,jdbcType=BIT},
		has_checkBill=#{hasCheckBill,jdbcType=BIT},
		has_document=#{hasDocument,jdbcType=BIT},
		flag = #{flag,jdbcType=BIT}
		where id = #{id,jdbcType=INTEGER}
	</update>
	<select id="selectProcNodeListByProcId" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from process_node
		where process_id = #{procId,jdbcType=INTEGER} order by sort
	</select>
	<select id="selectMaxSort" resultType="java.lang.Integer">
		select IFNULL(max(sort)+1,0) from process_node
	</select>
</mapper>